<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.IUserMapper">

    <sql id="selectUser">
        select  * from user
    </sql>


    <!--    返回主键方式1-->
    <!--
        useGeneratedKeys="true"：返回主键
        keyProperty：实体值的主键

        只适用主键自增的数据库。mysql、sql server，Oracle不支持
    -->
    <insert id="saveUser1" parameterType="user" useGeneratedKeys="true" keyProperty="id">
        insert into user(username, sex, birthday, address) values (#{username}, #{sex}, #{birthday}, #{address})
    </insert>
    <!--    返回主键方式2-->
    <insert id="saveUser2" parameterType="user">
        <!--
            selectKey：使用范围更广支持所有数据库，
                order="AFTER"：设置在sql语句执行之后，执行此语句
                keyColumn="id" ：主键列名
                keyProperty="id"：实体属性名
                resultType="int"：主键类型
        -->
        <selectKey order="AFTER" keyColumn="id" keyProperty="id" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user(username, sex, birthday, address) values (#{username}, #{sex}, #{birthday}, #{address})
    </insert>


    <select id="findById" parameterType="int" resultType="domain.User">select * from user where id = #{id}</select>
    <!--    查询所有用户-->
    <select id="findAllResultMap" resultMap="userResultMap">

        <!--   select * from user -->

        <include refid="selectUser"></include>
    </select>


    <!--
        id：标签唯一标识
        type：封装后实体类
    -->
    <resultMap id="userResultMap" type="domain.User">
        <!--
            id：配置主键
            result：表中的普通字段
        -->
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
    </resultMap>
    <select id="findByIdAndUsername1" resultType="domain.User">
        <!--    select * from user where id =#{arg0} and username=#{arg1}   -->
        select * from user where id = #{param1} and username=#{param2}
    </select>

    <select id="findByIdAndUsername2" resultType="domain.User">
        select * from user where id = #{userid} and username=#{username}
    </select>

    <select id="findByIdAndUsername3" resultType="domain.User" parameterType="domain.User">
        select * from user where id = #{id} and username = #{username}
    </select>

    <!--    模糊查询方式1-->
    <select id="findByUsername1" resultType="domain.User" parameterType="string">
        select * from user where username like #{username}
    </select>
    <!--    模糊查询方式1-->
    <!--
        parameterType是基本数据类型或string时，${}只能写value
        #{} 在Mybatis中是占位符，引用参数时会自动添加引号
        ${} 按原样拼接
      -->
    <select id="findByUsername2" resultType="domain.User" parameterType="string">
        select * from user where username like '${value}'
    </select>

    <!--    动态sql-if：多条件查询-->
    <select id="findByIdAndUsernameIf" resultType="User" parameterType="User">
        select * from user
        <!--   where 1=1-->
        <!--   where标签相当于 where 1=1，没有条件，不会拼接where -->

        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="username != null">
                and username = #{username}
            </if>
        </where>

    </select>

    <!--    动态sql-set：动态更新
        set标签在更新的时候会自动添加set关键字，并且去掉最后一个条件的逗号
    -->
    <update id="updateIf" parameterType="User">
        update user
        <set>
            <if test="username != null">
                username = #{username},
            </if>
            <if test="birthday != null">
                birthday = #{birthday},
            </if>
            <if test="sex != null">
                sex = #{sex},
            </if>
            <if test="address != null">
                address = #{address},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--
        动态sql的foreach标签：多值查询
        根据多个id值查询用户
    -->
    <select id="findByList" resultType="domain.User" parameterType="list">
        select * from user id
        <where>
            <!--
                collection：要遍历的集合类型
                open="id in("
                close=")"
                item="id"
                separator=","
            -->
            <foreach collection="list" open="id in(" close=")" item="id" separator=",">
                #{id}
            </foreach>
        </where>
    </select>
    <select id="findByArray" resultType="domain.User" parameterType="int">
        select * from user id
        <where>
            <foreach collection="array" open="id in(" close=")" item="id" separator=",">
                #{id}
            </foreach>
        </where>
    </select>


</mapper>